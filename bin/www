#!/usr/bin/env node
'use strict';

require('dotenv').config();

/**
 * Module dependencies.
 */

const app = require('../app');
const http = require('http');
const databaseIndexes = require('../DAL/dbIndexes');

databaseIndexes().then((response) => {
  /**
 * Get port from environment and store in Express.
 */

  const port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  const server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   * @param {string} val The port to normalize
   * @return {int} the normalized port number.
   */
  function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   * @param {object} error The error object
   */
  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === 'string' ?
      'Pipe ' + port :
      'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */
  function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ?
      'pipe ' + addr :
      'port ' + addr.port;
    if (process.env.NODE_ENV == 'development') {
      const debug = require('debug')('wishlists:server');
      debug('Listening on ' + bind);
    }
  }
}).catch((e) => {
  console.log(e);
});
